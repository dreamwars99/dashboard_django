from pathlib import Path
import re
import textwrap

js_path = Path('corporate/static/corporate/index_cor.js')
text = js_path.read_text(encoding='utf-8')

# Replace DEFAULT_DELTAS text if needed
text = text.replace("const DEFAULT_DELTAS = ['PD 변화: 0%p', '등급 변화: 없음', '권고 한도: 변경 없음'];", "const DEFAULT_DELTAS = ['p? 변화 0%p', '등급 변화 없음', '권고 한도: 변동 없음'];")
helper_old = textwrap.dedent("""  const fmtPercent = (value) => {\n    if (!Number.isFinite(value)) return '-';\n    return `${percentFormat.format(value * 100)}%`;\n  };\n\n  const toastStack = $('#toastStack');\n""")
helper_new = textwrap.dedent("""  const fmtPercent = (value) => {\n    if (!Number.isFinite(value)) return '-';\n    return `${percentFormat.format(value * 100)}%`;\n  };\n\n  const MODE = 'corporate';\n  let gaugeInstance = null;\n  let whatIfInitialized = false;\n  const DEFAULT_ASKED_AMOUNT = 35000000;\n\n  function toApprovalProb(prob) {\n    const value = Number(prob);\n    if (!Number.isFinite(value)) return 0;\n    return clamp(1 - value, 0, 1);\n  }\n\n  function formatKRW(amount) {\n    const value = Number(amount) || 0;\n    const sign = value < 0 ? '-' : '';\n    const absolute = Math.abs(value);\n    return `${sign}\${numberFormat.format(Math.round(absolute))}`;\n  }\n\n  function getDecisionMeta(pHat, theta) {\n    if (pHat >= theta + 0.05) return { text: '승인 권고', tone: 'approve' };\n    if (pHat >= theta - 0.05) return { text: '조건부 검토', tone: 'hold' };\n    return { text: '승인 거절', tone: 'reject' };\n  }\n\n  function toScore(value, target, direction) {\n    const v = Number(value);\n    const t = Number(target);\n    if (!Number.isFinite(v) || !Number.isFinite(t) || t == 0) {\n      return 0;\n    }\n    if (direction == '≥') {\n      return clamp((v / t) * 100, 0, 100);\n    }\n    const safeValue = v == 0 ? 0.0001 : v;\n    return clamp((t / safeValue) * 100, 0, 100);\n  }\n\n  function buildCorporateRadarMetrics(ratios) {\n    const r = ratios || {};\n    return [\n      { name: '유동비율', value: toScore(r.cr, 1.2, '≥') },\n      { name: '당좌비율', value: toScore(r.qr, 1.0, '≥') },\n      { name: '부채/자산', value: toScore(r.dar, 0.6, '≤') },\n      { name: 'ROA', value: toScore(r.roa, 0.03, '≥') },\n      { name: '순이익률', value: toScore(r.npm, 0.03, '≥') },\n      { name: '매출총이익률', value: toScore(r.gpm, 0.2, '≥') },\n    ];\n  }\n\n  function buildFinancialSummary(ratios) {\n    const r = ratios || {};\n    return [\n      { label: '유동비율', value: Number.isFinite(r.cr) ? r.cr.toFixed(2) : '-' },\n      { label: '당좌비율', value: Number.isFinite(r.qr) ? r.qr.toFixed(2) : '-' },\n      { label: '부채/자산', value: fmtPercent(r.dar) },\n      { label: 'ROA', value: fmtPercent(r.roa) },\n      { label: '순이익률', value: fmtPercent(r.npm) },\n      { label: '매출총이익률', value: fmtPercent(r.gpm) },\n    ];\n  }\n\n  function renderSummaryRadar(ratios) {\n    const chart = getChart('summaryRiskRadar');\n    if (!chart) return;\n    const metrics = buildCorporateRadarMetrics(ratios);\n    const indicator = metrics.map((item) => ({ name: item.name, max: 100 }));\n    const values = metrics.map((item) => clamp(item.value, 0, 100));\n    chart.setOption({\n      radar: {\n        indicator,\n        center: ['50%', '55%'],\n        radius: '70%',\n        splitNumber: 5,\n        axisName: { color: '#6c757d', fontSize: 12 },\n      },\n      series: [\n        {\n          type: 'radar',\n          data: [\n            {\n              value: values,\n              areaStyle: { opacity: 0.18 },\n              lineStyle: { width: 2 },\n            },\n          ],\n        },\n      ],\n    });\n  }\n\n  function renderFinancialSummary(ratios) {\n    const list = document.getElementById('corpFinancialSummary');\n    if (!list) return;\n    list.innerHTML = '';\n    buildFinancialSummary(ratios).forEach(({ label, value }) => {\n      const li = document.createElement('li');\n      li.className = 'kb-list__item';\n      const left = document.createElement('span');\n      left.className = 'kb-list__file';\n      left.textContent = label;\n      const right = document.createElement('span');\n      right.className = 'kb-list__meta';\n      right.textContent = value;\n      li.append(left, right);\n      list.appendChild(li);\n    });\n  }\n\n  function syncWhatIfInputs(ratios) {\n    if (whatIfInitialized) return;\n    if (!ratios) return;\n    const pairs = [\n      { id: 'wi_debt_asset', value: ratios.dar },\n      { id: 'wi_roa', value: ratios.roa },\n      { id: 'wi_npm', value: ratios.npm },\n      { id: 'wi_quick', value: ratios.qr },\n    ];\n    pairs.forEach(({ id, value }) => {\n      const slider = document.getElementById(id);\n      if (slider && Number.isFinite(value)) {\n        slider.value = String(Number(value).toFixed(4));\n      }\n    });\n    if (Number.isFinite(ratios.dar)) state.scenario.debtAssetRatio = ratios.dar;\n    if (Number.isFinite(ratios.roa)) state.scenario.roa = ratios.roa;\n    if (Number.isFinite(ratios.npm)) state.scenario.npm = ratios.npm;\n    if (Number.isFinite(ratios.qr)) state.scenario.quickRatio = ratios.qr;\n    whatIfInitialized = true;\n  }\n\n  function renderApprovalGauge(pHat, theta, status) {\n    if (typeof window === 'undefined' || typeof KBGauge === 'undefined') {\n      return;\n    }\n    gaugeInstance = KBGauge.render('summaryGauge', clamp(pHat, 0, 1), clamp(theta, 0, 1), {\n      status: status || '',\n      title: '승인확률',\n      valueFormatter: (val) => `${Number(val).toFixed(1)}%`,\n      animation: { duration: 420 },\n    });\n  }\n\n  const toastStack = $('#toastStack');\n""")
if 'DEFAULT_ASKED_AMOUNT' not in text:
    if helper_old not in text:
        raise SystemExit('fmtPercent block not found')
    text = text.replace(helper_old, helper_new, 1)

text = text.replace("  let gaugeFrame = null;\n", '')

state_new = textwrap.dedent("""  const state = {\n    meta: {\n      companyName: '',\n      regNo: '',\n      industry: '',\n      fiscalYear: '',\n    },\n    fin: {\n      netSales: 0,\n      cogs: 0,\n      da: 0,\n      ebit: 0,\n      netIncome: 0,\n      inventory: 0,\n      receivables: 0,\n      currentAssets: 0,\n      currentLiab: 0,\n      ltDebt: 0,\n      retainedEarnings: 0,\n      mktValue: 0,\n    },\n    ratios: {\n      gp: 0,\n      gpm: 0,\n      npm: 0,\n      cr: 0,\n      qr: 0,\n      dar: 0,\n      roa: 0,\n      altman: 0,\n      olson: 0,\n    },\n    baseRatios: null,\n    scenarioRatios: null,\n    risk: {\n      pd: 0.18,\n      grade: '--',\n      limit: 0,\n      rate: 0,\n      covenants: [],\n      flags: [],\n      deltasSummary: [...DEFAULT_DELTAS],\n      theta: 0.5,\n      decisionText: '',\n    },\n    request: {\n      amount: DEFAULT_ASKED_AMOUNT,\n    },\n    scenario: {\n      debtAssetRatio: 0.55,\n      roa: 0.03,\n      npm: 0.03,\n      quickRatio: 1.0,\n    },\n    baseline: null,\n    shap: [],\n    fi: [],\n    counters: {\n      whatIf: 0,\n      inputChanges: 0,\n    },\n    modelVersion: '-',\n  };\n""")
state_pattern = re.compile(r"  const state = \{.*?\n  };\n", re.S)
match = state_pattern.search(text)
if not match:
    raise SystemExit('state block not found')
text = text[:match.start()] + state_new + text[match.end():]

bind_new = textwrap.dedent("""  function bindWhatIfControls() {\n    const sliderMap = [\n      { id: 'wi_debt_asset', key: 'debtAssetRatio' },\n      { id: 'wi_roa', key: 'roa' },\n      { id: 'wi_npm', key: 'npm' },\n      { id: 'wi_quick', key: 'quickRatio' },\n    ];\n    const debouncedApply = debounce(applyWhatIfScenario, 200);\n    sliderMap.forEach(({ id, key }) => {\n      const slider = document.getElementById(id);\n      if (!slider) return;\n      slider.addEventListener('input', (event) => {\n        const value = Number(event.target.value);\n        if (Number.isFinite(value)) {\n          state.scenario[key] = value;\n          debouncedApply();\n        }\n      });\n    });\n  }\n""")
bind_pattern = re.compile(r"  function bindWhatIfControls\(\) \{.*?\n  }\n", re.S)
text = bind_pattern.sub(bind_new, text, count=1)

fetch_block = textwrap.dedent("""  function fetchCorporatePHat(payload) {\n    return fetch('/api/predict/corporate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-CSRFToken': CSRF_TOKEN,\n      },\n      body: JSON.stringify(payload),\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Failed to fetch corporate probability');\n        }\n        return response.json();\n      })\n      .then((data) => {\n        if (data and isinstance(data.get('p_hat'), (int, float))):\n            ???
"""
